#!/bin/bash
#
#  Simple wrapper script for launching tmux sessions.
#
#  Each session should be defined in ~/.tmux-sessions in a script with a file
#  name that matches the session name and a '.session' extension.
#
#  The session script is responsible for actually creating the session and
#  attaching to it though.
#
#  If a '<session>.status' script exists, that will be used to determine if the
#  session is running (exit code of 0) or not.  The default is to just use
#  'tmux has-session'.
#
#  If a '<session>.attach' script exists, that will be used to reattach to an
#  existing session, if the status command says it's already running. The
#  default is to just use 'tmux attach-session'.
#
TMX_SESSIONS_DIR="$HOME/.tmux-sessions"
TMX_NAME="$1"
TMX_SESSION_SCRIPT="$TMX_SESSIONS_DIR/$TMX_NAME.session"

tmx_status() {
    local session="$1"
    local script="$TMX_SESSIONS_DIR/$session.status"
    if [ -e "$script" ]; then
        bash $script $session
        return $?
    fi
    tmux has-session -t "$session" &>/dev/null
    return $?
}

tmx_attach() {
    local session="$1"
    local script="$TMX_SESSIONS_DIR/$session.attach"
    if [ -e "$script" ]; then
        bash $script $session
        return $?
    fi
    tmux -2 attach-session -t "$session"
    return $?
}

if [ -z "$TMX_NAME" ]; then
    for file in $TMX_SESSIONS_DIR/*.session; do
        base=$(basename "$file" .session)
        tmx_status $base
        ret=$?
        if [ $ret -eq 0 ]; then
            echo "$base: running"
        else
            echo "$base:"
        fi
    done
    exit 0
fi

if [ ! -e "$TMX_SESSION_SCRIPT" ]; then
    echo "Unknown session: $TMX_NAME" 1>&2
    exit 1
fi

if tmx_status "$TMX_NAME"; then
    echo "Session $TMX_NAME already exists."
    for i in $(seq 3 -1 1); do
        echo -en "\rAttaching in $i...Press any key to skip."
        if read -t 1; then
            break
        fi
    done
    tmx_attach "$TMX_NAME"
    exit 0
fi

bash -x $TMX_SESSION_SCRIPT $1
